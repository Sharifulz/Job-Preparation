DESCRIBE COUNTRIES;
SELECT * FROM COUNTRIES;

# CREATE TABLE --------------------------------------
CREATE TABLE AVENGERS
(FIRST_NAME VARCHAR2(45),
LAST_NAME VARCHAR2(45),
MOVILE NUMBER(10),
LANDLINE NUMBER(10));

# DESCRIBE TABLE STRUCTURE -----------------------------------
DESCRIBE AVENGERS;
/
DESC AVENGERS;

# LIKE ----------------------------------
SELECT * FROM COUNTRIES
WHERE COUNTRY_NAME LIKE 'A%';

SELECT COUNTRY_NAME ||' SHORT NAME '||COUNTRY_ID AS COUNTRY 
FROM COUNTRIES
WHERE COUNTRY_NAME LIKE 'A%';

SELECT COUNTRY_NAME ||COUNTRY_ID AS COUNTRY 
FROM COUNTRIES
WHERE COUNTRY_NAME LIKE 'A%';

SELECT FIRST_NAME ||' '|| LAST_NAME AS EMPLOYEE_NAME, SALARY, JOB_TITLE 
FROM EMPLOYEES E, JOBS J
WHERE E.JOB_ID = J.JOB_ID;

SELECT FIRST_NAME ||' '|| LAST_NAME AS EMPLOYEE_NAME, E.JOB_ID, SALARY, JOB_TITLE 
FROM EMPLOYEES E, JOBS J
WHERE E.JOB_ID = J.JOB_ID;

SELECT FIRST_NAME ||' '|| LAST_NAME AS EMPLOYEE_NAME, SALARY, JOB_TITLE 
FROM EMPLOYEES E LEFT OUTER JOIN JOBS J
ON E.JOB_ID=J.JOB_ID;

SELECT DISTINCT JOB_TITLE, MIN_SALARY, MAX_SALARY
FROM JOBS;

SELECT * FROM EMPLOYEES
WHERE HIRE_DATE > '01-JAN-04' AND HIRE_DATE <'01-FEB-06'
ORDER BY HIRE_DATE ASC;


** RANDOM QUERY -------------------------
SELECT FIRST_NAME ||' '|| LAST_NAME AS EMP_NAME
        ,   E.JOB_ID
        ,   J.JOB_TITLE
        ,   E.HIRE_DATE
        ,   START_DATE
        ,   END_DATE
        FROM EMPLOYEES E
            ,JOB_HISTORY JH
            ,JOBS J
            WHERE E.EMPLOYEE_ID = JH.EMPLOYEE_ID
            AND E.JOB_ID=J.JOB_ID;


    1. COUNT 
    2. IS NULL / IS NOT NULL
    3. DATE
    4. BETWEEN
    5. LIKE


** COUNT -------------------------
SELECT * FROM EMPLOYEES;
SELECT COUNT(SALARY)
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NULL;
SELECT COUNT(SALARY)
FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL;
SELECT NVL(COMMISSION_PCT, 00)
FROM EMPLOYEES;

** IS NOT NULL
SELECT * FROM EMPLOYEES
WHERE COMMISSION_PCT IS NOT NULL;

** IS NULL
SELECT * FROM EMPLOYEES
WHERE COMMISSION_PCT IS NULL;


# BETWEEN---------------------------------------
SELECT LAST_NAME , SALARY 
FROM EMPLOYEES
WHERE SALARY BETWEEN 2500 AND 3500;

#IN --------------------------------------------
SELECT LAST_NAME , SALARY 
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (90,100,30);

#NOT IN ---------------------------------------
SELECT EMPLOYEE_ID, LAST_NAME, JOB_ID 
FROM EMPLOYEES
WHERE JOB_ID NOT IN ('SA_MAN', 'IT_PROG');

#LIKE ------------------------------------------
SELECT FIRST_NAME 
FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'Sh_l%';

# ESCAPE ---------------------------------------
SELECT EMPLOYEE_ID, LAST_NAME, JOB_ID 
FROM EMPLOYEES
WHERE JOB_ID LIKE 'SA\_%' ESCAPE '\';

# ORDER BY -------------------------------------
SELECT EMPLOYEE_ID, LAST_NAME, HIRE_DATE , SALARY
FROM EMPLOYEES
ORDER BY HIRE_DATE DESC;

# CHARACTER FUNCTION
    1. LENGTH
    2. UPPER
    3. UPPER
    4. INITCAP
    5. SUBSTR
    6. REPLACE
    7. LPAD
    8. RPAD
    9. INSTR (INDEX OF)
    10. TRIM
** LENGTH ---------------------------
SELECT FIRST_NAME, LENGTH(FIRST_NAME) AS "LENGTH OF FIRST NAME"
FROM EMPLOYEES;
** UPPER ---------------------------
SELECT FIRST_NAME, UPPER(FIRST_NAME) AS "UPPER OF FIRST NAME"
FROM EMPLOYEES;
** LOWER ---------------------------
SELECT FIRST_NAME, LOWER(FIRST_NAME) AS "LOWER OF FIRST NAME"
FROM EMPLOYEES;
** INITCAP ---------------------------
SELECT FIRST_NAME, INITCAP(FIRST_NAME) AS "INITCAP OF FIRST NAME"
FROM EMPLOYEES;
** SUBSTR ---------------------------
SELECT FIRST_NAME, SUBSTR(FIRST_NAME, 2,3) AS "SUB STRING OF FIRST NAME"
FROM EMPLOYEES;
** REPLACE ---------------------------
SELECT FIRST_NAME, REPLACE(FIRST_NAME, 'e', '-REPLACED-') AS "REPLACE OF FIRST NAME"
FROM EMPLOYEES;
** LPAD ---------------------------
SELECT SALARY, LPAD(SALARY, 5, '#') AS "LPAD OF SALARY"
FROM EMPLOYEES;
** RPAD ---------------------------
SELECT SALARY, RPAD(SALARY, 5, '#') AS "LPAD OF SALARY"
FROM EMPLOYEES;
** INSTR ---------------------------
SELECT FIRST_NAME, INSTR(FIRST_NAME, 'e') AS "INSTR --> INDEX OF FIRST NAME"
FROM EMPLOYEES;
** TRIM ---------------------------
SELECT TRIM(' HEY THERE ') AS "TRIM FIRST NAME"
FROM DUAL;
SELECT LENGTH(' HEY THERE ') "WITHOUT TRIM SIZE",  LENGTH(TRIM(' HEY THERE ')) AS "WITH TRIM SIZE"
FROM DUAL;

# CONVERSION
    1. NVL(EXPR, REPLACE_VALUE)
    2. NVL2(EXPR, FALSE, TRUE)
    3. COALESCE(NULL, NULL, 12, 1) //RETURNS 12
    4. NULLIF(EXPR1, EXPR2) //COMPARES TWO COLUMN IF THEY ARE EQUAL
    5. CASE
    6. DECODE
** NVL -----------------------------------
SELECT NVL(COMMISSION_PCT, 00)
FROM EMPLOYEES;

** NVL2 -----------------------------------
SELECT COMMISSION_PCT, NVL2(COMMISSION_PCT,'NOT NULL',0)
FROM EMPLOYEES
WHERE SALARY>13000;

** COALESCE -------------------------------
        CREATE TABLE AVENGERS
        (FIRST_NAME VARCHAR2(45),
        LAST_NAME VARCHAR2(45),
        MOVILE NUMBER(10),
        LANDLINE NUMBER(10));
        DESC AVENGERS;
        INSERT INTO AVENGERS(FIRST_NAME, LANDLINE)
        VALUES('HULK',2020202020);
        SELECT * FROM AVENGERS;
** COALESCE -----------
SELECT FIRST_NAME, LAST_NAME, COALESCE(LANDLINE, MOVILE)
FROM AVENGERS;
SELECT FIRST_NAME, LAST_NAME, SALARY,COMMISSION_PCT, MANAGER_ID, COALESCE(COMMISSION_PCT, MANAGER_ID)
FROM EMPLOYEES
WHERE SALARY>10000;

** NULLIF -----------------------------------
SELECT FIRST_NAME, LAST_NAME, SALARY, NULLIF(LENGTH(FIRST_NAME), LENGTH(LAST_NAME))
FROM EMPLOYEES
WHERE SALARY>10000;

SELECT FIRST_NAME, LAST_NAME, SALARY, NVL(NULLIF(LENGTH(FIRST_NAME), LENGTH(LAST_NAME)), 0)
FROM EMPLOYEES
WHERE SALARY>10000;

# CASE -----------------------------------------
SELECT LAST_NAME , JOB_ID, SALARY
    , CASE JOB_ID
        WHEN 'AD_VP' THEN 10* SALARY
        WHEN 'AC_MGR' THEN 100*SALARY
        ELSE SALARY END "REVISED SALARY"
    FROM EMPLOYEES
    WHERE SALARY>10000;

# DECODE (IS SHORT FORM OF CASE) ---------------------------
SELECT LAST_NAME , JOB_ID, SALARY
    , DECODE (JOB_ID,
         'AD_VP' , 10* SALARY,
         'AC_MGR' , 100*SALARY,
         SALARY) "REVISED SALARY"
    FROM EMPLOYEES
    WHERE SALARY>10000;

# DATE --------------------------------------------------
    1. MONTHS_BETWEEN
    2. ADD_MONTHS
    3. NEXT_DAY
    4. LAST_DAY
    5. ROUND --> MONTH
    6. ROUND --> YEAR

**MONTHS_BETWEEN-------------------
SELECT SYSDATE FROM DUAL;
SELECT MONTHS_BETWEEN(TO_DATE('07-SEP-2020','DD-MON-YYYY'),SYSDATE) "Months"
FROM DUAL;

** ADD_MONTHS ---------------------
SELECT ADD_MONTHS(TO_DATE('07-SEP-2019','DD-MON-YYYY'),1) AS "NEXT MONTH"
FROM DUAL;

** NEXT_DAY -----------------------
SELECT NEXT_DAY(TO_DATE('07-SEP-2019','DD-MON-YYYY'),'SUNDAY') AS "NEXT "
FROM DUAL;

** LAST_DAY -----------------------
SELECT LAST_DAY(TO_DATE('07-SEP-2019','DD-MON-YYYY')) AS "LAST DAY OF THIS MONTH"
FROM DUAL;

** ROUND - MONTH -------------------
SELECT ROUND(TO_DATE('7-SEP-2019','DD-MON-YYYY'), 'MONTH') AS "LAST DAY OF THIS MONTH"
FROM DUAL;
** ROUND - YEAR -------------------
SELECT ROUND(TO_DATE('7-FEB-2019','DD-MON-YYYY'), 'YEAR') AS "LAST DAY OF THIS MONTH"
FROM DUAL;

# NUMBER ----------------------------------------------------
    1. ROUND
    2. TRUNC
    3. MOD

** ROUND  ---------------------
SELECT ROUND(95.847, 2)
FROM DUAL;
** TRUNC  -------------------
SELECT TRUNC(89.897, 1)
FROM DUAL;
SELECT TRUNC(89.897, -1)
FROM DUAL;
** MOD  ---------------------
SELECT MOD(89, 10)
FROM DUAL;



# CONVERTION AGAIN
    1. TO_NUMBER
    2. TO_CHAR
    3. TO_DATE

** TO_NUMBER ------------------------
SELECT TO_NUMBER('25')+25
FROM DUAL;
** TO_CHAR ---------------------------
SELECT TO_CHAR(25)||' = TWENTY FIVE'
FROM DUAL;
** TO_DATE --------------------------
SELECT TO_DATE('07-SEP-2020','DD-MON-YYYY')
FROM DUAL;
SELECT TO_DATE(SYSDATE,'DD-MON-YYYY')
FROM DUAL;

# GROUP FUNCTION--------------------------------------
    1. COUNT(*)
    2. COUNT(COLUMN_NAME)
    3. COUNT(DISTINCT COLUMN_NAME)

** COUNT(*) --> COUNT ALL THE ROW
SELECT COUNT(*) FROM EMPLOYEES;

** COUNT(COLUMN_NAME) --> COUNT ONLY NOT NULL ROW
SELECT COUNT(MANAGER_ID) FROM EMPLOYEES;

** COUNT(DISTINCT COLUMN_NAME) --> COUNT NOT NULL AND NON DUPLICATE ROWS
SELECT COUNT(DISTINCT(DEPARTMENT_ID))
FROM EMPLOYEES;

# GROUP FUNCTION
        1. MAX(COLUMN_NAME)
        2. MIN(COLUMN_NAME)
        3. AVG(COLUMN_NAME)
        4. SUM(COLUMN_NAME)
        5. GROUP FUNCTION IN CONDIOTION -->GROUP BY --> HAVING -->  ORDER BY
SELECT MAX(SALARY) FROM EMPLOYEES;
SELECT MIN(SALARY) FROM EMPLOYEES;
SELECT AVG(SALARY) FROM EMPLOYEES;
SELECT SUM(SALARY) FROM EMPLOYEES;
SELECT MAX(SALARY), MIN(SALARY),AVG(SALARY),SUM(SALARY)  FROM EMPLOYEES;

# MIXING GROUP FUNCTION MUST USE GROUP BY
    SELECT DEPARTMENT_ID, AVG(SALARY) 
    FROM EMPLOYEES
    GROUP BY DEPARTMENT_ID;
** USE WHERE FOR SIMPLE CONDITION -----------------
SELECT DEPARTMENT_ID, AVG(SALARY) 
FROM EMPLOYEES
WHERE SALARY >10000
GROUP BY DEPARTMENT_ID;
** USE HAVING WHEN CONDITION IS DEPENDS ON SOME GROUP FUNCTION------------------
SELECT DEPARTMENT_ID, AVG(SALARY) 
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING MAX(SALARY) >10000;
** 
SELECT DEPARTMENT_ID, AVG(SALARY) 
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING MAX(SALARY) >10000
ORDER BY DEPARTMENT_ID DESC;

# JOINS 
    1. LEFT OUTER JOIN
    2. RIGHT OUTER JOIN
    3. FULL OUTER JOIN
    4. CROSS JOIN
    5. NATURAL JOIN -- EQUIJOIN
    6. JOIN -- EQUIJOIN

**  LEFT OUTER JOIN ---------------------------------
select  e.last_name, e.department_id, d.department_name
from employees e left outer join departments d
on (e.department_id = d.department_id);

**  RIGHT OUTER JOIN ---------------------------------
select  e.last_name, e.department_id, d.department_name
from employees e RIGHT outer join departments d
on (e.department_id = d.department_id);

**  FULL OUTER JOIN ---------------------------------
select  e.last_name, e.department_id, d.department_name
from employees e FULL outer join departments d
on (e.department_id = d.department_id);

**  CROSS JOIN ---------------------------------
select  last_name,department_name
from employees CROSS join departments;

**  NATURAL JOIN ---------------------------------
SELECT DEPARTMENT_ID, DEPARTMENT_NAME, LOCATION_ID, CITY
FROM DEPARTMENTS
NATURAL JOIN LOCATIONS;

** JOIN ---------------------------------------
SELECT EMPLOYEE_ID, LAST_NAME,  DEPARTMENT_ID, LOCATION_ID
FROM EMPLOYEES JOIN DEPARTMENTS
USING (DEPARTMENT_ID);

# SUB QUERIES -------------------------------------
** SELECT SECOND HIGHEST SALARY FROM EMPLOYEES TABLE
SELECT MAX(SALARY) 
FROM EMPLOYEES
WHERE SALARY< (SELECT MAX(SALARY) FROM EMPLOYEES);

** ROW NUMBER
SELECT SALARY 
FROM EMPLOYEES
WHERE SALARY< (SELECT MAX(SALARY) FROM EMPLOYEES)
AND ROWNUM<6;

** USING QUOTE ---------------------------------
SELECT DEPARTMENT_NAME || Q'[ DEPARTMENT'S MANAGER IS ]'|| MANAGER_ID AS "DEPARTMENT AND MANAGER"
FROM DEPARTMENTS;

SELECT D.DEPARTMENT_NAME || Q'[ DEPARTMENT'S MANAGER IS ]'||  E.FIRST_NAME ||' '|| E.LAST_NAME 
AS "DEPARTMENT AND MANAGER"
FROM DEPARTMENTS D, EMPLOYEES E
WHERE D.MANAGER_ID = E.EMPLOYEE_ID;
